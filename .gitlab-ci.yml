stages:
  - lint
  - build
  - package
  - release

variables:
  PACKAGE_VERSION: $CI_COMMIT_TAG
  ZIP_NAME: "glpi-grafana-${CI_COMMIT_TAG}.zip"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mi-plugin/${PACKAGE_VERSION}"

phpcs:
  stage: lint
  image: jakzal/phpqa:latest
  tags:
    - opensa
    - docker
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - echo "Verificando PSR-12 en todos los archivos PHP, ignorando vendor..."
    - phpcs --standard=PSR12 --extensions=php --ignore=vendor/* --report=full --warning-severity=0 .

build_job:
  stage: build
  image: composer:latest
  tags:
    - opensa
    - docker
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Instalando dependencias de Composer..."
    - composer install --no-dev --optimize-autoloader
  artifacts:
    paths:
      - vendor/
    expire_in: 1 hour

package_job:
  stage: package
  image: alpine:latest
  tags:
    - opensa
    - docker
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: build_job
      artifacts: true
  script:
    - echo "Instalando curl y zip..."
    - apk --no-cache add curl zip

    - export DEST_FOLDER="grafana"
    - |
      echo "Creando el directorio de destino: ${DEST_FOLDER}/"
    - mkdir "${DEST_FOLDER}"

    - |
      echo "Moviendo archivos al directorio de destino..."
      for item in $(ls -A); do
        if [ "$item" != "${DEST_FOLDER}" ]; then
          mv "$item" "${DEST_FOLDER}/"
        fi
      done
    
    - echo "Empaquetando el directorio ${DEST_FOLDER}..."
    - zip -r "${ZIP_NAME}" "${DEST_FOLDER}"

    - echo "Subiendo el paquete al Package Registry..."
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${ZIP_NAME}" "${PACKAGE_REGISTRY_URL}/${ZIP_NAME}"


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - opensa
    - docker
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - package_job
  script:
    - echo "Creando la release en GitLab..."
    - |
      release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name "${CI_COMMIT_TAG}" \
        --description "Release generada automáticamente con las librerías de composer instaladas." \
        --assets-link "{\"name\":\"${ZIP_NAME}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${ZIP_NAME}\"}"
    